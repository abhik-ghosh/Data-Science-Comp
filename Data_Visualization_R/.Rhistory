print("Hello World")
mtcars
library(ggplot2)
cyl.am <- ggplot(mtcars, aes(x=factor(cyl)))
cyl.am + geom_bar()
cyl.am <- ggplot(mtcars, aes(fill=factor(am)))
cyl.am + geom_bar()
cyl.am <- ggplot(mtcars, aes(x=factor(cyl)))
cyl.am <- cyl.am + aes(fill = factor(am)
)
cyl.am + geom_bar()
cyl.am <- ggplot(mtcars, aes(x=factor(cyl)))
cyl.am + geom_bar(alpha = 0.4, position = position_dodge(width = NULL))
cyl.am + geom_bar(alpha = 0.4, position = position_dodge(width = NULL, preserve = factor(cyl)))
cyl.am + geom_bar(alpha = 0.4, position = position_dodge(width = NULL))
cyl.am <- ggplot(mtcars, aes(x=factor(cyl)))
cyl.am <- cyl.am + aes(fill = factor(am))
cyl.am + geom_bar(alpha = 0.4, position = position_dodge(width = NULL))
cyl.am + geom_bar(alpha = 0.4, position = position_dodge(width = NULL, padding=0.05))
cyl.am + geom_bar(alpha = 0.4, position = position_dodge(width = NULL, padding=0.1))
cyl.am + geom_bar(alpha = 0.4, position = position_dodge(width = 0.9))
cyl.am + geom_bar(alpha = 0.4, position = position_dodge(width = 0.2))
cyl.am + geom_bar(alpha = 0.4, position = position_dodge(width = 0.5))
cyl.am <- ggplot(mtcars, aes(x=factor(cyl), fill=factor(am))) + geom_bar(alpha = 0.4, position = position_dodge(width = 0.5))
ggplot(mtcars, aes(x=factor(cyl), fill=factor(am))) + geom_bar(alpha = 0.4, position = position_dodge(width = 0.5))
ggplot(mtcars, aes(x=factor(cyl), fill=factor(am))) + geom_bar(alpha = 0.4, position = position_dodge(width = 0.8))
ggplot(mtcars, aes(x=factor(cyl), fill=factor(am))) + geom_bar(alpha = 0.4, position = position_dodge(width = 0.6))
ggplot(mtcars, aes(x=factor(cyl), fill=factor(am))) + geom_bar(alpha = 0.4, position = position_dodge(width = 0.8))
ggplot(mtcars, aes(x=factor(cyl), fill=factor(am))) + geom_bar(alpha = 0.4, position = position_dodge(width = 0.2))
ggplot(mtcars, aes(x=factor(cyl), fill=factor(am))) + geom_bar(alpha = 0.4, position = position_dodge(width = 0.3))
sunflowerplot ( iris$Petal.Length, iris$Petal.Width, col = iris$Species,size = 4)
sunflowerplot ( iris$Petal.Length, iris$Petal.Width, col = factor(iris$Species),size = 4)
sunflowerplot ( iris$Petal.Length, iris$Petal.Width, col = ''red'',size = iris$Species)
sunflowerplot ( iris$Petal.Length, iris$Petal.Width, col = ''red',size = iris$Species)
sunflowerplot ( iris$Petal.Length, iris$Petal.Width, col = 'red',size = iris$Species)
sunflowerplot ( iris$Petal.Length, iris$Petal.Width, col = factor(iris$Species),size = 10)
dia.object <- ggplot(diamonds, aes(x = clarity, y = carat, col = price))
dia.object + geom_point(position = "jitter")
dia.object + geom_point()
dia.object <- ggplot(diamonds, aes(x = clarity, y = carat, col = price))
dia.object + geom_point()
dia.object <- ggplot(diamonds, aes(x = clarity, y = carat, col = price))
dia.object + geom_point(position = "jitter") + stat_sum()
ggplot(mtcars, aes(x=mpg, fill=factor(cyl))) +geom_histogram(binwidth = 1)
ggplot(mtcars, aes(x=mpg, fill=factor(cyl))) +geom_histogram(binwidth = 3)
ggplot(mtcars, aes(x=mpg, fill=factor(cyl))) +geom_histogram(binwidth = 0.5)
ggplot(mtcars, aes(x=mpg, fill=factor(cyl))) +geom_histogram(binwidth = 1)
ggplot(mtcars, aes(x=mpg, fill=factor(cyl))) +geom_polygon(binwidth = 1)
ggplot(mtcars, aes(x=mpg, fill=factor(cyl))) +geom_histogram(binwidth = 1)
ggplot(mtcars, aes(x=mpg, y=factor(cyl))) +geom_polygon(binwidth = 1)
ggplot(mtcars, aes(x=mpg, fill=factor(cyl))) +geom_histogram(binwidth = 1)
ggplot(mtcars, aes(x=mpg, fill=factor(cyl))) +geom_freqpoly(binwidth = 1)
ggplot(mtcars, aes(x=mpg, fill=cyl)) +geom_freqpoly(binwidth = 1)
sepal_plot <- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width))
sepal_plot + geom_smooth()
sepal_plot + geom_point()
sepal_plot + geom_point() + geom_smooth()
sepal_plot1 <- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, col=factor(Species)))
sepal_plot1 +geom_point()
sepal_plot2 <- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, col=factor(Species), size=Petal.Length))
sepal_plot2 +geom_point()
ggplot(mtcars, aes(x=wt, y=mpg,col=facyor(cyl))) +geom_point()
ggplot(mtcars, aes(x=wt, y=mpg,col=factor(cyl))) +geom_point()
# Q2.2 - In the above command, assign the color "blue" to col inside the geom layer.
# Do not change the aesthetic layer from the previous plot.
ggplot(mtcars, aes(x=wt, y=mpg,col=factor(cyl))) +geom_point(col=blue)
# Q2.2 - In the above command, assign the color "blue" to col inside the geom layer.
# Do not change the aesthetic layer from the previous plot.
ggplot(mtcars, aes(x=wt, y=mpg,col=factor(cyl))) +geom_point(col='blue')
#Q2.3 - Complete the command to map the cyl (cylinder) variable to the label attribute.
# Plot wt and mpg on x and y axes respectively.The output should be a plot where each label
# represents the cyl value.
ggplot(mtcars, aes(x=wt, y=mpg,label=factor(cyl))) +geom_point()
#Q2.3 - Complete the command to map the cyl (cylinder) variable to the label attribute.
# Plot wt and mpg on x and y axes respectively.The output should be a plot where each label
# represents the cyl value.
ggplot(mtcars, aes(x=wt, y=mpg,label=cyl)) +geom_point()
#Q2.3 - Complete the command to map the cyl (cylinder) variable to the label attribute.
# Plot wt and mpg on x and y axes respectively.The output should be a plot where each label
# represents the cyl value.
ggplot(mtcars, aes(x=wt, y=mpg,label=cyl)) +geom_point()
#Q2.3 - Complete the command to map the cyl (cylinder) variable to the label attribute.
# Plot wt and mpg on x and y axes respectively.The output should be a plot where each label
# represents the cyl value.
ggplot(mtcars, aes(x=wt, y=mpg)) +geom_label(cyl)
#Q2.3 - Complete the command to map the cyl (cylinder) variable to the label attribute.
# Plot wt and mpg on x and y axes respectively.The output should be a plot where each label
# represents the cyl value.
ggplot(mtcars, aes(x=wt, y=mpg)) +geom_label(data=cyl)
#Q2.3 - Complete the command to map the cyl (cylinder) variable to the label attribute.
# Plot wt and mpg on x and y axes respectively.The output should be a plot where each label
# represents the cyl value.
ggplot(mtcars, aes(x=wt, y=mpg)) +geom_label(data=mtcars$cyl)
#Q2.3 - Complete the command to map the cyl (cylinder) variable to the label attribute.
# Plot wt and mpg on x and y axes respectively.The output should be a plot where each label
# represents the cyl value.
ggplot(mtcars, aes(x=wt, y=mpg)) +geom_label(data=factor(mtcars$cyl)
#Q2.3 - Complete the command to map the cyl (cylinder) variable to the label attribute.
# Plot wt and mpg on x and y axes respectively.The output should be a plot where each label
# represents the cyl value.
ggplot(mtcars, aes(x=wt, y=mpg)) +geom_label(data=factor(mtcars$cyl))
#Q2.3 - Complete the command to map the cyl (cylinder) variable to the label attribute.
# Plot wt and mpg on x and y axes respectively.The output should be a plot where each label
# represents the cyl value.
ggplot(mtcars, aes(x=wt, y=mpg)) +geom_text(aes(factor(mtcars$cyl)))
#Q2.3 - Complete the command to map the cyl (cylinder) variable to the label attribute.
# Plot wt and mpg on x and y axes respectively.The output should be a plot where each label
# represents the cyl value.
ggplot(mtcars, aes(x=wt, y=mpg)) +geom_text(aes(label=factor(mtcars$cyl)))
#Q3.1 - Use the diamond data set to plot a scatter plot representing carat on the x-axis,
# price on the y-axis and the clarity mapped to the color attribute.
ggplot(diamonds, aes(x=carat, y=price, col=factor(clarity)))
#Q3.1 - Use the diamond data set to plot a scatter plot representing carat on the x-axis,
# price on the y-axis and the clarity mapped to the color attribute.
ggplot(diamonds, aes(x=carat, y=price, col=factor(clarity))) + geom_point()
#Q3.2 - In the previous command, assign the transparency parameter alpha = 0.5
ggplot(diamonds, aes(x=carat, y=price, col=factor(clarity))) + geom_point(alpha=0.5)
#Q3.3 - Create a scatter plot with the alpha parameter as 0.5, price variable represented by the color attribute,
# and the x and y axes representing the clarity and carat variables respectively.
ggplot(diamonds, aes(x=clarity, y=carat, col=price)) + geom_point(alpha=0.5)
#Q3.4 - Do you see overlapping points in the previous plot?
# Make a plot where the points are spread and reduce the overlap.
ggplot(diamonds, aes(x=clarity, y=carat, col=price)) + geom_jitter(position=1)
#Q3.4 - Do you see overlapping points in the previous plot?
# Make a plot where the points are spread and reduce the overlap.
ggplot(diamonds, aes(x=clarity, y=carat, col=price)) + geom_jitter(position="jitter")
ggplot(diamonds, aes(x=clarity, y=carat, col=price)) + geom_jitter(position=position_jitter(width = 0.5))
#Q4.1 - Using the mtcars data, plot a histogram using binwidth = 1 and the variable mpg on the x axis.
ggplot(mtcars, aes(x=mpg)) + geom_histogram(binwidth = 1)
#Q4.2 - In the previous histogram, also display the am values using two colors.
ggplot(mtcars, aes(x=mpg, col=factor(am))) + geom_histogram(binwidth = 1)
#Q4.2 - In the previous histogram, also display the am values using two colors.
ggplot(mtcars, aes(x=mpg, fill=factor(am))) + geom_histogram(binwidth = 1)
#Q4.3 - Using the previous command, add the position attribute to get a dodge chart.
# Use position = "dodge"
ggplot(mtcars, aes(x=mpg, fill=factor(am))) + geom_histogram(binwidth = 1, position = "dodge")
#Q4.4 - Change the histogram plotted above so that the bars occupy the entire length
# of the y axis and the color represents fraction of am values
ggplot(mtcars, aes(x=mpg, fill=factor(am))) + geom_histogram(binwidth = 1, position = "fill")
#Q5.1 - For mtcars data frame, plot a histogram of mpg so that cylinders are represented by 3 colours
ggplot(mtcars, aes(x=mpg, fill=factor(cyl))) + geom_histogram()
#Q5.2 - In mtcars, the variable 'gear' represents the number of gears for each car.
# How many unique values of gear are present in mtcars?
# Use the unique() function to find out.
unique(mtcars$gear)
# Paragraph on facet wraps
# If you want to plot separate histograms for each value of gear on the same screen,
# you can use another layer of ggplot - facet_wrap. It plots multiple plots in separate windows
# in a grid so that you can view them all at once.
# Like geom layers, this layer can be added to a plot using a + sign.
# Type ?facet_wrap to read the documentation
?facet_wrap
ggplot(diamonds, aes(carat, price)) +
geom_point() +
facet_wrap(~ clarity) +
ggtitle("Diamonds dataset facetted by clarity")
ggplot(mtcars, aes(x=mpg, fill=factor(cyl))) + geom_histogram() +facet_wrap(~ gear)
#Q5.3 - Add a facet_wrap layer to the histogram plotted in Q5.1 to plot separate histograms
# for each value of gear. Use binwidth = 2.
ggplot(mtcars, aes(x=mpg, fill=factor(cyl))) + geom_histogram(binwidth = 2) +facet_wrap(~ gear)
#Q5.4 - Let us plot histograms of the diamonds data frame. The variable 'cut'
# represents the quality of cutting of the diamonds. Using facet_wrap, plot histograms of
# the 'price' variable so that each facet displays one type of cut.
# Use binwidth = 100.
# Observe that it is now very easy to compare the price distributions of different cuts.
ggplot(diamonds, aes(x=price)) + geom_histogram(binwidth = 2) + facet_wrap(~ cut)
#Q5.4 - Let us plot histograms of the diamonds data frame. The variable 'cut'
# represents the quality of cutting of the diamonds. Using facet_wrap, plot histograms of
# the 'price' variable so that each facet displays one type of cut.
# Use binwidth = 100.
# Observe that it is now very easy to compare the price distributions of different cuts.
ggplot(diamonds, aes(x=price)) + geom_histogram(binwidth = 100) + facet_wrap(~ cut)
#Q5.5 - For diamonds, plot 5 scatter plots corresponding to 5 values of 'cut'
# using facet_wrap. Plot 'carat' on x axis, 'price' on y axis and map color to 'table'.
ggplot(diamonds, aes(x=carat, y=price, col=table)) + geom_point() + facet_wrap(~ cut)
#Q5.5 - For diamonds, plot 5 scatter plots corresponding to 5 values of 'cut'
# using facet_wrap. Plot 'carat' on x axis, 'price' on y axis and map color to 'table'.
ggplot(diamonds, aes(x=carat, y=price, col=factor(table)) + geom_point() + facet_wrap(~ cut)
#Q5.5 - For diamonds, plot 5 scatter plots corresponding to 5 values of 'cut'
# using facet_wrap. Plot 'carat' on x axis, 'price' on y axis and map color to 'table'.
ggplot(diamonds, aes(x=carat, y=price, col=factor(table))) + geom_point() + facet_wrap(~ cut)
#Q5.5 - For diamonds, plot 5 scatter plots corresponding to 5 values of 'cut'
# using facet_wrap. Plot 'carat' on x axis, 'price' on y axis and map color to 'table'.
ggplot(diamonds, aes(x=carat, y=price, col=factor(table))) + geom_point() + facet_wrap(~ cut)
#Q5.5 - For diamonds, plot 5 scatter plots corresponding to 5 values of 'cut'
# using facet_wrap. Plot 'carat' on x axis, 'price' on y axis and map color to 'table'.
ggplot(diamonds, aes(x=carat, y=price, col=table)) + geom_point() + facet_wrap(~ cut)
install.packages("zoo")
library(zoo)
ukacc <- data.frame(Seatbelts, date = as.Date(as.yearmon((time(Seatbelts)))))
ggplot(ukacc,aes(x=kms, y=drivers)) + geom_smooth()
ggplot(ukacc,aes(x=law, y=drivers)) + geom_smooth()
ggplot(ukacc,aes(x=law, y=drivers)) + geom_point()
ggplot(ukacc,aes(x=PetrolPrice, y=drivers)) + geom_smooth()
ggplot(ukacc,aes(x=law, y=drivers)) + geom_line()
ggplot(ukacc,aes(x=time, y=drivers)) + geom_line()
ggplot(ukacc,aes(x=time, y=drivers)) + geom_line()
ggplot(ukacc,aes(x=date, y=drivers)) + geom_line()
ggplot(ukacc,aes(x = ukacc$date, y = ukacc$drivers)) + geom_line() + geom_smooth(span = 0.5)
ggplot(ukacc,aes(x = ukacc$date, y = ukacc$drivers)) + geom_line() + geom_smooth(span = 1)
ukacc
par(mfrow = c(3, 2))
ggplot(ukacc,aes(x=date, y=drivers)) + geom_line(col='red')
ggplot(ukacc,aes(x=date, y=front)) + geom_line(col='blue')
ggplot(ukacc,aes(x=date, y=rear)) + geom_line(col='yellow')
ggplot(ukacc,aes(x=date, y=law)) + geom_line(col='green')
ggplot(ukacc,aes(x=date, y=PetrolPrice)) + geom_line(col='teal')
par(mfrow = c(3, 2))
ggplot(ukacc,aes(x=date, y=drivers)) + geom_line(col='red')
ggplot(ukacc,aes(x=date, y=front)) + geom_line(col='blue')
ggplot(ukacc,aes(x=date, y=rear)) + geom_line(col='yellow')
ggplot(ukacc,aes(x=date, y=law)) + geom_line(col='green')
ggplot(ukacc,aes(x=date, y=PetrolPrice)) + geom_line(col='orange')
par(mfrow = c(1, 5))
ggplot(ukacc,aes(x=date, y=drivers)) + geom_line(col='red')
ggplot(ukacc,aes(x=date, y=front)) + geom_line(col='blue')
ggplot(ukacc,aes(x=date, y=rear)) + geom_line(col='yellow')
ggplot(ukacc,aes(x=date, y=law)) + geom_line(col='green')
ggplot(ukacc,aes(x=date, y=PetrolPrice)) + geom_line(col='orange')
ggplot(ukacc, aes(date)) +
geom_line(aes(y=drivers), colour="red") +
geom_line(aes(y=front), colour="green")
g  <- ggplot(ukacc, aes(date))
g <- g + geom_line(aes(y=drivers), colour="red")
g <- g + geom_line(aes(y=front), colour="green")
g <- g + geom_line(aes(y=rear), colour="blue")
g <- g + geom_line(aes(y=law), colour="yellow")
g <- g + geom_line(aes(y=PetrolPrice), colour="orange")
g
g  <- ggplot(ukacc, aes(date))
g <- g + geom_line(aes(y=drivers), colour="red")
g <- g + geom_line(aes(y=front), colour="green")
g <- g + geom_line(aes(y=rear), colour="blue")
g <- g + geom_line(aes(y=law), colour="yellow")
g <- g + geom_line(aes(y=PetrolPrice), colour="orange")
g
g <- g + geom_line(aes(y=PetrolPrice), colour="black")
g
g <- g + geom_point(aes(y=law), colour="yellow")
g <- g + geom_line(aes(y=PetrolPrice), colour="black")
g
ggplot(ukacc,aes(x = ukacc$date, y = ukacc$drivers), col = "black", size = 1) + geom_line() + geom_line(data = ukacc,aes(x = ukacc$date, y = ukacc$front), col = "red", size = 1) + geom_line(data = ukacc,aes(x = ukacc$date, y = ukacc$rear), col = "blue", size = 1)
ggplot(ukacc,aes(x = ukacc$date, y = ukacc$drivers), col = "black", size = 1) +
geom_line() +
geom_line(data = ukacc,aes(x = ukacc$date, y = ukacc$front), col = "red", size = 1) +
geom_line(data = ukacc,aes(x = ukacc$date, y = ukacc$rear), col = "blue", size = 1) +
geom_text(data = ukacc,aes(x = ukacc$date, y = ukacc$law), col = "green", size = 1)
ggplot(ukacc,aes(x = ukacc$date, y = ukacc$drivers), col = "black", size = 1) +
geom_line() +
geom_line(data = ukacc,aes(x = ukacc$date, y = ukacc$front), col = "red", size = 1) +
geom_line(data = ukacc,aes(x = ukacc$date, y = ukacc$rear), col = "blue", size = 1) +
geom_text(data = ukacc,aes(label = ukacc$law), col = "green", size = 1)
ggplot(ukacc,aes(x = ukacc$date, y = ukacc$drivers), col = "black", size = 1) +
geom_line() +
geom_line(data = ukacc,aes(x = ukacc$date, y = ukacc$front), col = "red", size = 1) +
geom_line(data = ukacc,aes(x = ukacc$date, y = ukacc$rear), col = "blue", size = 1) +
geom_text(aes(label = ukacc$law))
ggplot(ukacc,aes(x = ukacc$date, y = ukacc$drivers), col = "black", size = 1) +
geom_line() +
geom_line(data = ukacc,aes(x = ukacc$date, y = ukacc$front), col = "red", size = 1) +
geom_line(data = ukacc,aes(x = ukacc$date, y = ukacc$rear), col = "blue", size = 1) +
geom_point(aes(label = ukacc$law))
ggplot(ukacc,aes(x = ukacc$date, y = ukacc$drivers), col = "black", size = 1) +
geom_line() +
geom_line(data = ukacc,aes(x = ukacc$date, y = ukacc$front), col = "red", size = 1) +
geom_line(data = ukacc,aes(x = ukacc$date, y = ukacc$rear), col = "blue", size = 1) +
geom_vline(xintercept=as.numeric(ukacc$law), linetype=4)
View(ukacc)
data1 <- ukacc %>%
separate(date, c('year', 'month', 'day'), sep = '-')
library(dplyr)
library(tidyr)
library(dplyr)
data1 <- ukacc %>%
separate(date, c('year', 'month', 'day'), sep = '-')
View(ukacc)
View(data1)
ggplot(data1,aes(x=drivers, y=factor(month))) + geom_bar()
ggplot(data1,aes(x=factor(month), y=drivers)) + geom_bar()
ggplot(data1,aes(x=factor(month), y=drivers)) + geom_point()
drivers_month = data1 %>% group_by(month) %>% summarise(driverdeaths=mean(drivers))
ggplot(drivers_month, aes(x=month, y=driverdeaths)) + geom_bar(stat = "identity")
drivers_year = data1 %>% group_by(year) %>% summarise(driverdeaths=mean(drivers))
ggplot(drivers_year, aes(x=year, y=driverdeaths)) + geom_bar(stat = "identity")
ggplot(drivers_year, aes(x = year, y = driverdeaths)) +
geom_boxplot()
ggplot(data1, aes(x = year, y = drivers)) +
geom_boxplot()
ggplot(ukacc, aes(group = year,x = date, y=ukacc$drivers)) + geom_boxplot()
ggplot(data1, aes(group = year,x = date, y=ukacc$drivers)) + geom_boxplot()
ggplot(data1, aes(x = year, y = drivers)) +
geom_boxplot()
ggplot(USArrests, aes(x = row.names(USArrests), y = USArrests$Murder, lab)) +
geom_bar() +
theme(axis.text.x=element_text(angle=90, hjust=1))
ggplot(USArrests, aes(x = row.names(USArrests), y = USArrests$Murder, lab)) +
geom_bar(stat = "identity") +
theme(axis.text.x=element_text(angle=90, hjust=1))
ggplot(USArrests, aes(x = row.names(USArrests), y = USArrests$Murder, lab)) +
geom_col() +
theme(axis.text.x=element_text(angle=90, hjust=1))
ggplot(USArrests, aes(x = row.names(USArrests), y = USArrests$Murder, lab)) +
geom_col() +
theme(axis.text.x=element_text(angle=90, hjust=1))
ggplot(sleep, aes(x = ID, y = extra, fill = group)) + geom_col()
ggplot(sleep, aes(x = ID, y = extra, fill = group)) + geom_bar()
ggplot(sleep, aes(x = ID, y = extra, fill = group)) + geom_histogram()
ggplot(sleep, aes(x = ID, y = extra, fill = group)) + geom_freqpoly()
ggplot(sleep, aes(x = ID, y = extra, fill = group)) + geom_col()
ggplot(sleep, aes(x = ID, y = extra, fill = group)) + geom_bar(stat = "identity")
sir <- read.csv('sir.csv', stringsAsFactors = F)
setwd("C:/Users/abhik/OneDrive/Desktop/DS/Data_Visualization")
setwd("C:/Users/abhik/OneDrive/Desktop/DS/Data_Visualization")
sir <- read.csv('sir.csv', stringsAsFactors = F)
summary(sir)
head(sir)
ggplot(sir, aes(x=Wkts)) + geom_bar()
sir_innings_wkts <- sir %>% group_by(Inns) %>% summarise(median(Wkts))
View(sir_innings_wkts)
sir_innings_wkts <- sir %>% group_by(Inns) %>% summarise(mean(Wkts))
sir_innings_wkts <- sir %>% group_by(Inns) %>% summarise(median(Wkts))
ggplot(sir, aes(x = as.factor(Inns), y = Wkts)) + geom_boxplot()
ggplot(sir,aes(x=Mdns, y=Econ))+geom_point()
ggplot(sir,aes(x=Mdns, y=Econ))+geom_point()+geom_smooth()
